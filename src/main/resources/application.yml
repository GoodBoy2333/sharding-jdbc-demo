spring:
#  ShardingSphere 配置项
  shardingsphere:
    datasource:
      # 所有数据源的名字
      names: ds-mall-0, ds-mall-1
      # 数据源配置 00
      ds-mall-0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://ngrok2.xiaomiqiu.cn:3037/mall_0?useSSL=false&useUnicode=true&characterEncoding=UTF-8
        username: root
        password: 123456
      # 数据源配置 01
      ds-mall-1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://ngrok2.xiaomiqiu.cn:3038/mall_1?useSSL=false&useUnicode=true&characterEncoding=UTF-8
        username: root
        password: 123456
    # 分片规则
    sharding:
      # 默认分表策略
      default-table-strategy:
        standard:
          # 精确分片算法,用于处理使用单一键作为分片键的 = 与 IN 进行分片的场景
          precise-algorithm-class-name: com.fy.shardingjdbcdemo.algorithm.PreciseShardingTableAlgorithm
          # 范围分片算法,用于处理使用单一键作为分片键的 BETWEEN AND、>、<、>=、<=进行分片的场景
          range-algorithm-class-name: com.fy.shardingjdbcdemo.algorithm.RangeShardingTableAlgorithm
          # 分片键
          sharding-column: user_id
      # 默认分库策略
      default-database-strategy:
        standard:
          precise-algorithm-class-name: com.fy.shardingjdbcdemo.algorithm.PreciseShardingDBAlgorithm
          range-algorithm-class-name: com.fy.shardingjdbcdemo.algorithm.RangeShardingDBAlgorithm
          sharding-column: user_id
      # 绑定表：分片规则一致的主表和子表
      binding-tables[0]: orders,orders_item
      tables:
        # orders 表配置
        orders:
          actualDataNodes: ds-mall-0.orders_$->{[0,2]}, ds-mall-1.orders_$->{[1,3]}
          # 主键生成策略:雪花算法
          key-generator:
            column: id
            type: SNOWFLAKE
#          database-strategy:
#            # 行表达式分片策略
#            inline:
#              # 算法表达式
#              algorithm-expression: ds-mall-$->{user_id % 2}
#              # 分片键
#              sharding-column: user_id
#          table-strategy:
#            inline:
#              algorithm-expression: orders_$->{user_id % 4}
#              sharding-column: user_id
        # orders 表配置
        orders_item:
          actualDataNodes: ds-mall-0.orders_item_$->{[0,2]}, ds-mall-1.orders_item_$->{[1,3]}
          key-generator: # 主键生成策略:雪花算法
            column: id
            type: SNOWFLAKE
#          database-strategy:
#            inline:
#              algorithm-expression: ds-mall-$->{user_id % 2}
#              sharding-column: user_id
#          table-strategy:
#            inline:
#              algorithm-expression: orders_item_$->{user_id % 4}
#              sharding-column: user_id
        # order_config 表配置
        order_config:
          actualDataNodes: ds-mall-0.order_config # 仅映射到 ds-orders-0 数据源的 order_config 表
    # 拓展属性配置
    props:
      sql:
        show: true # 打印 SQL

# mybatis 配置内容
mybatis:
  mapper-locations: classpath:mapper/*.xml # 配置 Mapper XML 地址
  type-aliases-package: com.fy.shardingjdbcdemo.model # 配置数据库实体包路径
